/*
 * File: app/view/SearchForm.js
 * Date: Fri Nov 25 2011 18:16:44 GMT+0000 (GMT)
 *
 * This file was generated by Ext Designer version 1.2.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Superfastmatch.view.SearchForm', {
    requires: ['Ext.ux.statusbar.ValidationStatus', 'Ext.ux.statusbar.StatusBar'],
    extend: 'Superfastmatch.view.ui.SearchForm',
    alias: 'widget.searchform',

    listeners: {
       'render': function(panel) {
           panel.body.on('click',this.unlockText,panel);
        }
    },

    initComponent: function() {
        var me = this;
        me.callParent(arguments);
        me.addDocked([Ext.create('Ext.ux.statusbar.StatusBar', {
            itemId: 'SearchStatus',
            dock: 'bottom',
            defaultText: 'Ready',
            items: ['->', {
                text: 'Search',
                itemId: 'SearchButton'
            }],
            plugins: Ext.create('Ext.ux.statusbar.ValidationStatus', {
                form: me.getId()
            })
        })]);
        me.down('#SearchButton').on('click',me.search,me);
        me.addEvents('searching','results');
    },
    
    search: function(){
        var me=this,
            status=me.down('#SearchStatus'),
            form=me.getForm();
        if (form.isValid()){
            status.showBusy('Searching...');
            me.getEl().mask();
            me.lockText();
            var search=Ext.create('Superfastmatch.model.Search',form.getFieldValues());
            search.save({
                success: me.results,
                scope: me
            });
            me.fireEvent('searching');
        }  
    },    
    
    results: function(record,operation){
        var me=this,
            status=me.down('#SearchStatus');
        status.setStatus({
            text: 'Search in '+record.get("responseTime"),
            iconCls: ''
        });
        me.getEl().unmask();
        me.fireEvent('results',record,operation);
    },
    
    lockText: function(){
        var me=this,
            searchText=me.down('#SearchText'),
            text=searchText.getRawValue();
        searchText.hide();
        me.update({text:text});
    },
    
    unlockText: function(){
        var me=this,
            searchText=me.down('#SearchText');
        if (searchText.isHidden()){
            me.update();
            searchText.show();   
        }
    },
    
    highlightChange: function(eventArgs){
        var me=this,
            searchText=me.down('#SearchText'),
            textEl=me.body.dom,
            text=RegExp.escape(searchText.getRawValue().substr(eventArgs.start,eventArgs.length)).trim();
        if (eventArgs.action==='enter'){
            highlightText(textEl,text,'highlight',true);
            Ext.get(Ext.query('span',textEl)).scrollIntoView(textEl);            
        }else if(eventArgs.action==='leave'){
            removeHighlighting('highlight',textEl);            
        }
    }
});